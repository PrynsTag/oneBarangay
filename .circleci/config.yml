---
version: 2.1

orbs:
  python: circleci/python@1.4
  jira: circleci/jira@1.3.1

jobs:
  test:
    docker:
      - image: cimg/python:3.9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    environment:
      BROWSERSTACK_USERNAME: \"$BROWSERSTACK_USERNAME\"
      BROWSERSTACK_ACCESS_KEY: \"$BROWSERSTACK_ACCESS_KEY\"
      BROWSERSTACK_LOCAL: $BROWSERSTACK_LOCAL
      BROWSERSTACK_LOCAL_IDENTIFIER: \"$BROWSERSTACK_LOCAL_IDENTIFIER\"
    parallelism: 4
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run Django Test
          command: |
            base64 -di \<<< $CLOUD_STORAGE_KEY >> /tmp/key.json
            export GOOGLE_APPLICATION_CREDENTIALS=/tmp/key.json
            coverage run ./manage.py test -v 2 --parallel
            coverage run ./manage.py check --deploy
      - run:
          name: Generate Coverage Reort
          command: |
            mkdir -p test-results
            coverage report
            coverage html -d test-results/coverage.html
            coverage xml -o test-results/unittest/unittest.xml
      - run:
          name: Report results to Coveralls
          command: |
            ./.coveralls.yml.sh > ./.coveralls.yml
            coveralls -v
      - run:
          name: Report results to DeepSource
          command: |
            curl https://deepsource.io/cli | sh
            ./bin/deepsource report --analyzer test-coverage --key python --value-file test-results/unittest/unittest.xml
      - store_test_results:
          path: test-results/unittest
      - store_artifacts:
          path: test-results
          destination: tr1

  deploy-to-staging:
    docker:
      - image: google/cloud-sdk
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Copy across app.yaml
          command: |
            ./app.yaml.sh > ./app.yaml
      - run:
          name: Set up GCloud Auth and Deploy to Staging
          command: |
            echo $GCLOUD_AUTH_KEY | base64 -di | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet config set account ${SERVICE_ACCOUNT}
            gcloud app deploy --no-promote app.yaml

  deploy-to-prod:
    docker:
      - image: google/cloud-sdk
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Deploying to App Engine Production
          command: |
            echo $GCLOUD_AUTH_KEY | base64 -di | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet config set account ${SERVICE_ACCOUNT}
            gcloud app deploy app.yaml

workflows:
  build-test-deploy:
    jobs:
      - test:
          name: App Engine Test
          post-steps:
            - jira/notify:
                environment_type: testing
                job_type: build
          context:
            - docker
            - browserstack
          filters:
            branches:
              only:
                - master
                - develop
                - /feature\/.*/

      - deploy-to-staging:
          name: App Engine Staging
          post-steps:
            - jira/notify:
                environment_type: staging
                job_type: deployment
          context:
            - docker
          requires:
            - App Engine Test
          filters:
            branches:
              only:
                - master
                - develop

      - approve-prod-deployment:
          type: approval
          filters:
            branches:
              only: master
          requires:
            - App Engine Staging

      - deploy-to-prod:
          name: App Engine Production
          context:
            - docker
          requires:
            - approve-prod-deployment
          filters:
            branches:
              only: master
          post-steps:
            - jira/notify:
                environment_type: production
                job_type: deployment
